class User < ApplicationRecord
  has_secure_password

  has_many :minder_contracts, class_name: "Contract", foreign_key:"child_minder_id"
  has_many :parent_bosses, through: :minder_contracts, source: :parent
  has_many :parent_contracts, class_name: "Contract", foreign_key:"parent_id"
  has_many :minders, through: :parent_contracts, source: :child_minder
  has_many :children
  has_many :postings
  has_many :schools, through: :postings
  has_many :session_bookings
  has_many :availabilities, through: :session_bookings


  accepts_nested_attributes_for :children, reject_if: proc { |attributes| attributes['name'].blank? }


  # def password=(new_password)
  #   salt = BCrypt::Engine::generate_salt
  #   hashed = BCrypt::Engine::hash_secret(new_password, salt)
  #   self.password_digest = salt + hashed
  # end
  #
  # # authenticate(password: string) -> User?
  # def authenticate(password)
  #   # Salts generated by generate_salt are always 29 chars long.
  #   salt = password_digest[0..28]
  #   hashed = BCrypt::Engine::hash_secret(password, salt)
  #   return nil unless (salt + hashed) == self.password_digest
  # end
  #
  # def self.user_from_session
  #   User.find(session[:user_id])
  # end

end
